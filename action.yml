name: 'Comment Spam Handler'
description: 'Run actions that analyze and handle comments identified as spam'
author: 'ciscorucinski'

# Derivative from Selenium team
# https://github.com/SeleniumHQ/selenium/blob/3963bb83f27b2bd6c536617fd13daa5d9becb69c/.github/workflows/delete-comments.yml

inputs:

  personal_access_token:
    description: 'A Github PAT'
    required: true


  delete_comment:
    required: false
    description: |
      Automatically delete comments identified as spam.
      Default: False
    default: 'false'
    
  block_commenter:
    required: false
    description: |
      Automatically block commenter identified as spammer.
      Default: False
    default: 'false'


  is_organization:
    required: false
    description: |
      Determines if blocking a commenter will occur on the organization level or not
    default: 'false'
  

  remote_repository:
    required: true
    description: |
      Name of remote repository which holds a trigger file.
    default: ''

  trigger_file:
    required: true
    description: |
      Name of trigger file within a remote repository.
    default: ''

outputs:

  triggers:
    description: |
      List of trigger phrases
    value: ${{ steps.get_trigger_phrases.outputs.triggers }}

  trigger_found:
    description: |
      Indicates if a comment contains a trigger phrase
      Type: String
    value: ${{ steps.check_comment.outputs.result }}

  comment:
    description: |
      Comment content
    value: ${{ github.event.issue.body }}

  is_comment_deleted:
    description: |
      Did the comment successfully get deleted
      Type: String
    value: ${{ steps.comment_deleted.outputs.result }}

  is_commenter_blocked:
    description: |
      Did the commenter successfully get blocked
      Type: String
    value: ${{ steps.block_commenter.outputs.result }}


runs:
  using: "composite"

  steps:
    - name: Checkout private repository
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.remote_repository }}      # Private Repo location
        token: ${{ inputs.personal_access_token }}
        sparse-checkout: |                          # New-line deliminated file
            ${{ inputs.trigger_file }}

    - name: Get trigger phrases from another repository
      id: get_trigger_phrases
      shell: bash
      run: |                                         # Allows for multiline output
        {
          echo 'triggers<<EOF'
          cat ${{ inputs.trigger_file }}
          echo EOF
        } >> $GITHUB_OUTPUT

    - name: Check for triggers in comment
      id: check_comment
      uses: actions/github-script@v7
      with:
        script: |
          const comment = context.payload.comment.body;
          const triggers = `${process.env.TRIGGER_PHRASES}`.split('\n');
          return triggers.some(trigger => comment.includes(trigger));
      env:
        TRIGGER_PHRASES: ${{ steps.get_trigger_phrases.outputs.triggers }}

    - name: Delete comment if it contains any trigger
      id: delete_comment
      if: ${{ inputs.delete_comment == 'true' && steps.check_comment.outputs.result == 'true' }}
      uses: actions/github-script@v7
      with:
        script: |
          const commentId = context.payload.comment.id;
          const response = await github.rest.issues.deleteComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: commentId
          });
          return response;

    - name: Block user if comment contains any trigger
      id: block_commenter
      if: ${{ inputs.block_commenter == 'true' && steps.check_comment.outputs.result == 'true' }}
      uses: actions/github-script@v7
      with:
        script: |
          const userId = context.payload.comment.user.id;
          const response = await github.rest.users.block({
            owner: context.repo.owner,
            repo: context.repo.repo,
            user_id: userId
          });
          return response;
